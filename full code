#include<stdio.h>
#include<unistd.h>
#include<windows.h>

int main()
{
	
	printf("\n\t\t*******************WELCOME TO THE PROCESS SCHEDULER*******************");
	int num;
	printf("\nEnter Number of process to be scheduled : ");
	scanf("%d",&num);
	int arrival_time[num],burst_time[num],rem_burst[num],time=0,remain,quantum,flag=0,TurnAround[num],Waiting[num];
	float average_wait=0,average_tat=0;
	remain=num;
	int i,j,pid[num];
	for(i=0;i<num;i++)
	{
		printf("\n\nEnter Arrival Time of Process[%d] : ",i+1);
		scanf("%d",&arrival_time[i]);
		printf("\nEnter Burst Time of Process[%d] : ",i+1);
		scanf("%d",&burst_time[i]);
		rem_burst[i]=burst_time[i];
		pid[i]=i+1;
	}
	
	printf("\nEnter Time Quantum : ");
	scanf("%d",&quantum);
	
	for(i=0;i<num;i++)
	{
		for(j=i+1;j<num;j++)
		{
			if(arrival_time[i]>arrival_time[j])
			{
				int swap_a=arrival_time[i];
				arrival_time[i]=arrival_time[j];
				arrival_time[j]=swap_a;
				int swap_b=burst_time[i];
				burst_time[i]=burst_time[j];
				burst_time[j]=swap_b;
				int swap_p=pid[i];
				pid[i]=pid[j];
				pid[j]=swap_p;
			}
		}
			rem_burst[i]=burst_time[i];
	}
		//printf("\nArrival Time\tBurst Time");
		printf("\n\n\n   ******* GANTT CHART *******");
		printf("\n***********************************");
		printf("\nProcess Name\t| Preemption Time");
		printf("\n***********************************");

	for(time=0,i=0;remain!=0;)
	{
		if(rem_burst[i]<=quantum && rem_burst[i]>0)
		{
			if(rem_burst[i]==quantum)
			{
				time=time+quantum;
				sleep(1);
				printf("\nP%d\t\t %d ",pid[i],time);
				rem_burst[i]=0;
				flag=1;
			}

			else if(rem_burst[i]<quantum)
			{
				time=time+rem_burst[i];
				sleep(1);
				printf("\nP%d\t\t %d ",pid[i],time);
				rem_burst[i]=0;
				flag=1;
			}
		}

		else if(rem_burst[i]>0)
		{
			rem_burst[i]=rem_burst[i]-quantum;
			time=time+quantum;
			sleep(1);
			printf("\nP%d\t\t %d ",pid[i],time);
		}

		if(rem_burst[i]==0 && flag==1)
		{
			TurnAround[i]=time-arrival_time[i];
			Waiting[i]=TurnAround[i]-burst_time[i];
			if(Waiting[i]<0)
				Waiting[i]=0;
			average_wait=average_wait+Waiting[i];
			average_tat=average_tat+TurnAround[i];
			remain--;
			flag=0;

		}

		if(i==num-1)
			i=0;

		else if(arrival_time[i+1]<time)
			i++;

		else
			i=0;
	}
	printf("\n\n***********************************");
	sleep(2);
	system("CLS");
	printf("\n\n\n\n\t\t-----------------------------------------------------------------------------");
	printf("\n\t\t|\tArrival Time\tBurst Time\tTurnAround Time\t\tWaiting Time|");
	printf("\n\t\t-----------------------------------------------------------------------------");
	
	for(i=0;i<num;i++)
	{
		printf("\n\t\t| P[%d]\t\t%d\t\t%d\t\t%d\t\t\t%d  | ",pid[i],arrival_time[i],burst_time[i],TurnAround[i],Waiting[i]);
		printf("\n\t\t-----------------------------------------------------------------------------");

	}



	average_wait=average_wait/num;
	average_tat=average_tat/num;
	printf("\n\n\tAverage TurnAround Time = %.1f",average_tat);
	printf("\n\tAverage Waiting Time = %.1f",average_wait);


}

